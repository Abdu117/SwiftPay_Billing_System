/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package manager;

import com.formdev.flatlaf.FlatDarkLaf;
import db_connection.db_connection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author medo4
 */
public class ViewStockInternalFrame extends javax.swing.JInternalFrame {

 public void fetch_products(){

        try{ 
     
     db_connection c= new db_connection();
     Connection conn=c.connect();
       String query = "SELECT product_id as Id,name as Name,price AS Price,discount AS Discount,quantity AS Quantity,brand_name AS Brand,category_name AS Category FROM  products,brands,categories "
               + "where categories.id=products.category_id and brands.id = products.brand_id";
        PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery();
         products_Table.setModel(DbUtils.resultSetToTableModel(rs));
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
    }
    public ViewStockInternalFrame() {
        initComponents();
        
     try {
         //Theme initialize

         UIManager.setLookAndFeel(new FlatDarkLaf());
     } catch (UnsupportedLookAndFeelException ex) {
         Logger.getLogger(ViewStockInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
            //view of internal frame modifications
            this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
            BasicInternalFrameUI ui= (BasicInternalFrameUI)this.getUI();
            ui.setNorthPane(null);
            //disable Resize for internalJframe
            this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGradient1 = new manager.PanelGradient();
        jScrollPane1 = new javax.swing.JScrollPane();
        products_Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        search_TextField = new javax.swing.JTextField();
        find_Button = new javax.swing.JButton();
        category_ComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cat_filter_Button = new javax.swing.JButton();
        brand_ComboBox = new javax.swing.JComboBox<>();
        brand_filter_Button = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelGradient1.setBackground(new java.awt.Color(0, 153, 204));
        panelGradient1.setColorGradient(new java.awt.Color(0, 153, 255));
        panelGradient1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        products_Table.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        products_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product_id", "Name", "Price", "Discount", "Quantity", "Brand_name", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        products_Table.getTableHeader().setReorderingAllowed(false);
        products_Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                products_TableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        products_Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                products_TableFocusGained(evt);
            }
        });
        products_Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                products_TablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(products_Table);

        panelGradient1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 890, 400));

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/ready-stock (1).png"))); // NOI18N
        panelGradient1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 80, 60));

        search_TextField.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        search_TextField.setToolTipText("product name");
        panelGradient1.add(search_TextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 540, 140, -1));

        find_Button.setFont(new java.awt.Font("Tw Cen MT", 0, 20)); // NOI18N
        find_Button.setForeground(new java.awt.Color(255, 255, 255));
        find_Button.setText("Find");
        find_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_ButtonActionPerformed(evt);
            }
        });
        panelGradient1.add(find_Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 580, 140, 30));

        category_ComboBox.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        category_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--" }));
        category_ComboBox.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                category_ComboBoxComponentAdded(evt);
            }
        });
        category_ComboBox.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                category_ComboBoxHierarchyChanged(evt);
            }
        });
        category_ComboBox.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                category_ComboBoxAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        category_ComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                category_ComboBoxFocusGained(evt);
            }
        });
        category_ComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                category_ComboBoxPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                category_ComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                category_ComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });
        category_ComboBox.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                category_ComboBoxComponentShown(evt);
            }
        });
        category_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                category_ComboBoxActionPerformed(evt);
            }
        });
        category_ComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                category_ComboBoxPropertyChange(evt);
            }
        });
        category_ComboBox.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                category_ComboBoxVetoableChange(evt);
            }
        });
        panelGradient1.add(category_ComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 540, 140, -1));

        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Category");
        panelGradient1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 500, 100, -1));

        cat_filter_Button.setFont(new java.awt.Font("Tw Cen MT", 0, 20)); // NOI18N
        cat_filter_Button.setForeground(new java.awt.Color(255, 255, 255));
        cat_filter_Button.setText("Filter");
        cat_filter_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cat_filter_ButtonActionPerformed(evt);
            }
        });
        panelGradient1.add(cat_filter_Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 580, 140, 30));

        brand_ComboBox.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        brand_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--" }));
        brand_ComboBox.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                brand_ComboBoxAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        brand_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brand_ComboBoxActionPerformed(evt);
            }
        });
        panelGradient1.add(brand_ComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 540, 140, 23));

        brand_filter_Button.setFont(new java.awt.Font("Tw Cen MT", 0, 20)); // NOI18N
        brand_filter_Button.setForeground(new java.awt.Color(255, 255, 255));
        brand_filter_Button.setText("Filter");
        brand_filter_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brand_filter_ButtonActionPerformed(evt);
            }
        });
        panelGradient1.add(brand_filter_Button, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 580, 140, 30));

        jLabel3.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Brand");
        panelGradient1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 500, 80, -1));

        jLabel4.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Search");
        panelGradient1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, 78, -1));

        jLabel5.setFont(new java.awt.Font("Tw Cen MT", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("STOCK INFORMATION");
        panelGradient1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 380, 50));

        getContentPane().add(panelGradient1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, 670));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void products_TableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_products_TableAncestorAdded
        fetch_products();
    }//GEN-LAST:event_products_TableAncestorAdded

    private void products_TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_products_TableFocusGained

    }//GEN-LAST:event_products_TableFocusGained

    private void products_TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_products_TablePropertyChange

    }//GEN-LAST:event_products_TablePropertyChange

    private void find_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_ButtonActionPerformed

        try{

            db_connection c= new db_connection();
            String product_name = search_TextField.getText();
            Connection conn=c.connect();
            String query = "SELECT product_id as Id,name as Name,price AS Price,discount AS Discount,quantity AS Quantity,brand_name AS Brand,category_name AS Category FROM  products,brands,categories "
            + "where categories.id=products.category_id and brands.id = products.brand_id and name like ? ";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, "%"+product_name+"%");
            ResultSet rs = stmt.executeQuery();
            products_Table.setModel(DbUtils.resultSetToTableModel(rs));
            conn.close();
            stmt.close();
        }

        catch (SQLException ee){

            ee.getMessage();
        }

    }//GEN-LAST:event_find_ButtonActionPerformed

    private void category_ComboBoxComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_category_ComboBoxComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxComponentAdded

    private void category_ComboBoxHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_category_ComboBoxHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxHierarchyChanged

    private void category_ComboBoxAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_category_ComboBoxAncestorAdded
        try{

            db_connection c= new db_connection();
            Connection conn=c.connect();
            String query = "SELECT category_name FROM  categories";
            PreparedStatement stmt =  conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            while(rs.next()){
                String name =rs.getString("category_name");
                category_ComboBox.addItem(name);
                System.out.println(name);
            }
            conn.close();
            stmt.close();
        }

        catch (SQLException ee){

            ee.getMessage();}
    }//GEN-LAST:event_category_ComboBoxAncestorAdded

    private void category_ComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_category_ComboBoxFocusGained
        
    }//GEN-LAST:event_category_ComboBoxFocusGained

    private void category_ComboBoxPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_category_ComboBoxPopupMenuCanceled
        
    }//GEN-LAST:event_category_ComboBoxPopupMenuCanceled

    private void category_ComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_category_ComboBoxPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxPopupMenuWillBecomeInvisible

    private void category_ComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_category_ComboBoxPopupMenuWillBecomeVisible
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxPopupMenuWillBecomeVisible

    private void category_ComboBoxComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_category_ComboBoxComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxComponentShown

    private void category_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_category_ComboBoxActionPerformed

    }//GEN-LAST:event_category_ComboBoxActionPerformed

    private void category_ComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_category_ComboBoxPropertyChange

    }//GEN-LAST:event_category_ComboBoxPropertyChange

    private void category_ComboBoxVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_category_ComboBoxVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_category_ComboBoxVetoableChange

    private void cat_filter_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cat_filter_ButtonActionPerformed

        if(category_ComboBox.getSelectedIndex()==0){

            fetch_products();
        }

        else{
            try{

                String cat_name= category_ComboBox.getSelectedItem().toString();
                db_connection c= new db_connection();
                Connection conn=c.connect();
                String query ="SELECT product_id as Id,name as Name,price AS Price,discount AS Discount,quantity AS Quantity,brand_name AS Brand,category_name AS Category FROM  products,brands,categories "
                + "where categories.id=products.category_id and brands.id = products.brand_id and category_name = ? " ;
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setString(1, cat_name);
                ResultSet rs = stmt.executeQuery();
                products_Table.setModel(DbUtils.resultSetToTableModel(rs));
                conn.close();
                stmt.close();
            }

            catch (SQLException ee){

                ee.getMessage();
            }

        }
    }//GEN-LAST:event_cat_filter_ButtonActionPerformed

    private void brand_ComboBoxAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_brand_ComboBoxAncestorAdded
        try{

            db_connection c= new db_connection();
            Connection conn=c.connect();
            String query = "SELECT brand_name FROM  brands";
            PreparedStatement stmt =  conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            while(rs.next()){
                String name =rs.getString("brand_name");
                brand_ComboBox.addItem(name);
                System.out.println(name);
            }
            conn.close();
            stmt.close();
        }

        catch (SQLException ee){

            ee.getMessage();}
    }//GEN-LAST:event_brand_ComboBoxAncestorAdded

    private void brand_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brand_ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brand_ComboBoxActionPerformed

    private void brand_filter_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brand_filter_ButtonActionPerformed
        if(brand_ComboBox.getSelectedIndex()==0){

            fetch_products();
        }

        else{
            try{

                String brand_name= brand_ComboBox.getSelectedItem().toString();
                db_connection c= new db_connection();
                Connection conn=c.connect();
                String query ="SELECT product_id as Id,name as Name,price AS Price,discount AS Discount,quantity AS Quantity,brand_name AS Brand,category_name AS Category FROM  products,brands,categories "
                + "where categories.id=products.category_id and brands.id = products.brand_id and brand_name = ? " ;
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setString(1, brand_name);
                ResultSet rs = stmt.executeQuery();
                products_Table.setModel(DbUtils.resultSetToTableModel(rs));
                conn.close();
                stmt.close();
            }

            catch (SQLException ee){

                ee.getMessage();
            }}
    }//GEN-LAST:event_brand_filter_ButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> brand_ComboBox;
    private javax.swing.JButton brand_filter_Button;
    private javax.swing.JButton cat_filter_Button;
    private javax.swing.JComboBox<String> category_ComboBox;
    private javax.swing.JButton find_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private manager.PanelGradient panelGradient1;
    private javax.swing.JTable products_Table;
    private javax.swing.JTextField search_TextField;
    // End of variables declaration//GEN-END:variables
}
